// @include background-image(logo, png, 100px, 100px, center, no-repeat);
@mixin background-image($file, $type, $width, $height, $position, $repeat) {
	background-image: url($image-path + $file + '.' + $type);
	background-position: $position;
	background-repeat: $repeat;
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
	    only screen and (-moz-min-device-pixel-ratio: 2),
	    only screen and (-o-min-device-pixel-ratio: 2/1),
	    only screen and (min-device-pixel-ratio: 2),
	    only screen and (min-resolution: 192dpi),
	    only screen and (min-resolution: 2dppx){
	    & {
			background-image: url($image-path + $file + '-2x.' + $type);
			-webkit-background-size: $width $height;
			-moz-background-size: $width $height;
			-o-background-size: $width $height;
			background-size: $width $height;
	    }
	}
}

// @include border-radius(5px);
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	border-radius: $radius;
	background-clip: padding-box;
}

// @include box-sizing(border-box);
@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model;
	-moz-box-sizing: $box-model;
	box-sizing: $box-model;
}

// @include box-shadow(10px, 10px, 5px, 0px, #000);
@mixin box-shadow($x, $y, $b, $s, $color ) {
    -webkit-box-shadow: $x $y $b $s $color;
    -moz-box-shadow: $x $y $b $s $color;
    box-shadow: $x $y $b $s $color;
}

// @include breakpoint(xs) {}
@mixin breakpoint($class) {

    @if $class == xs {
        @media (max-width: $bp-sm - 1) { @content; }
    }

    @else if $class == sm {
        @media screen and (min-width: $bp-sm) and (max-width: $bp-md) { @content; }
    }

    @else if $class == md {
        @media screen and (min-width: $bp-md) and (max-width: $bp-lg) { @content; }
    }

    @else if $class == lg {
        @media (min-width: $bp-lg) { @content; }
    }

}

// @include clearfix;
@mixin clearfix {
    &:before, &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
    *zoom: 1;
}

// @include column(2);
@mixin column($value) {
	width: (100/12) * $value + 0%;
}

// @include flex;
@mixin flex {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex
}

// @include linearGradient(left, right, start-percent, end-percent, #cccccc, #666666);
@mixin linearGradient($start, $end, $start-percent, $end-percent, $color1, $color2) {

    @if $start == 'top' { $type: 0; }
    @else if $start == 'left' { $type: 1; }

    background: $color1;
    background: -moz-linear-gradient($start, $color1 $start-percent, $color2 $end-percent);
    background: -webkit-linear-gradient($start, $color1 $start-percent, $color2 $end-percent);
    background: -o-linear-gradient($start, $color1 $start-percent, $color2 $end-percent);
    background: -ms-linear-gradient($start, $color1 $start-percent, $color2 $end-percent);
    background: linear-gradient(to $end, $color1 $start-percent, $color2 $end-percent);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$color1}', endColorstr='#{$color2}',GradientType=#{$type} );
}

// @include list-reset;
@mixin list-reset {
	list-style: none;
	margin: 0;
	padding: 0
}

// @include opacity(0.8);
@mixin opacity($value) {
    $IEValue: $value * 100;
    opacity: $value;
    filter: alpha(opacity=$IEValue);
}

// @include responsive-img;
@mixin responsive-img {
    display: block;
    height: auto;
    max-width: 100%;
    min-width: 100%;
}

// @include text-elipsis;
@mixin ellipsis ($width){
    display: inline-block;
    max-width: $width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// @include text-truncate;
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// @include transition(all .2s linear);
@mixin transition($args) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

// @include vertical-align;
@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

// @include reset-vertical-align;
@mixin reset-vertical-align {
    top: auto;
    -webkit-transform: none;
    -ms-transform: none;
    transform: none;
}